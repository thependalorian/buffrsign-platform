version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: buffsign-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: buffsign_prod
      POSTGRES_USER: buffsign
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./src/database/schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./backups:/backups
    ports:
      - "127.0.0.1:5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U buffsign -d buffsign_prod"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - buffsign-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: buffsign-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - buffsign-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # BuffrSign API
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: buffsign-api-prod
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://buffsign:${DB_PASSWORD}@postgres:5432/buffsign_prod
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      JWT_SECRET: ${JWT_SECRET}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      EMAIL_API_KEY: ${EMAIL_API_KEY}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      APP_URL: ${APP_URL}
      API_URL: ${API_URL}
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
      - legal_kb:/app/legal-kb:ro
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - buffsign-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: buffsign-nginx-prod
    restart: unless-stopped
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx-site.conf:/etc/nginx/conf.d/default.conf:ro
      - uploads_data:/opt/buffsign/uploads:ro
      - certbot_data:/etc/letsencrypt:ro
      - certbot_www:/var/www/certbot:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - buffsign-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # SSL Certificate Bot
  certbot:
    image: certbot/certbot
    container_name: buffsign-certbot-prod
    volumes:
      - certbot_data:/etc/letsencrypt
      - certbot_www:/var/www/certbot
    command: echo "Certbot placeholder - run manually for SSL setup"
    networks:
      - buffsign-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: buffsign-prometheus-prod
    restart: unless-stopped
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "127.0.0.1:9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - buffsign-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: buffsign-grafana-prod
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SERVER_ROOT_URL: ${APP_URL}/grafana/
      GF_SERVER_SERVE_FROM_SUB_PATH: true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deploy/grafana-dashboard.json:/etc/grafana/provisioning/dashboards/buffsign.json:ro
    ports:
      - "127.0.0.1:3001:3000"
    depends_on:
      - prometheus
    networks:
      - buffsign-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Log Management - Loki
  loki:
    image: grafana/loki:latest
    container_name: buffsign-loki-prod
    restart: unless-stopped
    volumes:
      - loki_data:/loki
      - ./deploy/loki-config.yml:/etc/loki/local-config.yaml:ro
    ports:
      - "127.0.0.1:3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - buffsign-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: buffsign-backup-prod
    restart: "no"
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./deploy/backup.sh:/backup.sh:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - buffsign-network
    command: |
      sh -c "
        echo '0 2 * * * /backup.sh' | crontab - &&
        crond -f
      "

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  legal_kb:
    driver: local
  certbot_data:
    driver: local
  certbot_www:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local

networks:
  buffsign-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16